//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nop.Admin.IISConfigurerServiceClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="IISConfigurerServiceClient.IIISConfigurer")]
    public interface IIISConfigurer {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIISConfigurer/AddBinding", ReplyAction="http://tempuri.org/IIISConfigurer/AddBindingResponse")]
        bool AddBinding(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIISConfigurer/AddBinding", ReplyAction="http://tempuri.org/IIISConfigurer/AddBindingResponse")]
        System.Threading.Tasks.Task<bool> AddBindingAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIISConfigurer/DeleteBinding", ReplyAction="http://tempuri.org/IIISConfigurer/DeleteBindingResponse")]
        bool DeleteBinding(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIISConfigurer/DeleteBinding", ReplyAction="http://tempuri.org/IIISConfigurer/DeleteBindingResponse")]
        System.Threading.Tasks.Task<bool> DeleteBindingAsync(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIISConfigurer/AddSubdominNSRecord", ReplyAction="http://tempuri.org/IIISConfigurer/AddSubdominNSRecordResponse")]
        string AddSubdominNSRecord(string subdomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIISConfigurer/AddSubdominNSRecord", ReplyAction="http://tempuri.org/IIISConfigurer/AddSubdominNSRecordResponse")]
        System.Threading.Tasks.Task<string> AddSubdominNSRecordAsync(string subdomainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIISConfigurer/DeleteSubdomain", ReplyAction="http://tempuri.org/IIISConfigurer/DeleteSubdomainResponse")]
        string DeleteSubdomain(string domainName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IIISConfigurer/DeleteSubdomain", ReplyAction="http://tempuri.org/IIISConfigurer/DeleteSubdomainResponse")]
        System.Threading.Tasks.Task<string> DeleteSubdomainAsync(string domainName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IIISConfigurerChannel : Nop.Admin.IISConfigurerServiceClient.IIISConfigurer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IISConfigurerClient : System.ServiceModel.ClientBase<Nop.Admin.IISConfigurerServiceClient.IIISConfigurer>, Nop.Admin.IISConfigurerServiceClient.IIISConfigurer {
        
        public IISConfigurerClient() {
        }
        
        public IISConfigurerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IISConfigurerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IISConfigurerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IISConfigurerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddBinding(string domainName) {
            return base.Channel.AddBinding(domainName);
        }
        
        public System.Threading.Tasks.Task<bool> AddBindingAsync(string domainName) {
            return base.Channel.AddBindingAsync(domainName);
        }
        
        public bool DeleteBinding(string domainName) {
            return base.Channel.DeleteBinding(domainName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteBindingAsync(string domainName) {
            return base.Channel.DeleteBindingAsync(domainName);
        }
        
        public string AddSubdominNSRecord(string subdomainName) {
            return base.Channel.AddSubdominNSRecord(subdomainName);
        }
        
        public System.Threading.Tasks.Task<string> AddSubdominNSRecordAsync(string subdomainName) {
            return base.Channel.AddSubdominNSRecordAsync(subdomainName);
        }
        
        public string DeleteSubdomain(string domainName) {
            return base.Channel.DeleteSubdomain(domainName);
        }
        
        public System.Threading.Tasks.Task<string> DeleteSubdomainAsync(string domainName) {
            return base.Channel.DeleteSubdomainAsync(domainName);
        }
    }
}
