@model CustomerModel

@using Telerik.Web.Mvc.UI;
@using Nop.Core.Domain.Orders;
@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)
@Html.Telerik().TabStrip().Name("customer-edit").Items(x =>
{
    //var d = TabCustomerCompany().ToHtmlString();
    var tabInfo = x.Add().Text(T("Admin.Customers.Customers.Info").Text).Content(TabInfo().ToHtmlString());
    //var tabCustomerCompany = x.Add().Text(T("Admin.Customer.Company.Company").Text).Content(TabCustomerCompany().ToHtmlString());
    //var tabCompanyDocuments = x.Add().Text(T("Admin.Customer.Company.Documents").Text).Content(TabCompanyDocuments().ToHtmlString());
    var tabCustomerRoles = x.Add().Text(T("Admin.Customers.Customers.CustomerRoles").Text).Content(TabCustomerRoles().ToHtmlString());


    TabStripItemBuilder tabOrders = null;
    //if (Model.Id > 0)
    //    tabOrders = x.Add().Text(T("Admin.Customers.Customers.Orders").Text).Content(TabOrders().ToHtmlString());
    //
    //TabStripItemBuilder tabRewardPoints = null;
    //if (Model.DisplayRewardPointsHistory)
    //    tabRewardPoints = x.Add().Text(T("Admin.Customers.Customers.RewardPoints").Text).Content(TabRewardPoints().ToHtmlString());

    //TabStripItemBuilder tabShoppingCart = null;
    //if (Model.Id > 0)
    //    tabShoppingCart = x.Add().Text(T("Admin.Customers.Customers.CurrentShoppingCart").Text).Content(TabCurrentShoppingCart().ToHtmlString());

    //TabStripItemBuilder tabWishlist = null;
    //if (Model.Id > 0)
    //    tabWishlist = x.Add().Text(T("Admin.Customers.Customers.CurrentWishlist").Text).Content(TabCurrentWishlist().ToHtmlString());

    TabStripItemBuilder tabActivityLog = null;
    if (Model.Id > 0)
        tabActivityLog = x.Add().Text(T("Admin.Customers.Customers.ActivityLog").Text).Content(TabActivityLog().ToHtmlString());

    //TabStripItemBuilder tabImpersonate = null;
    //if (Model.Id > 0)
    //    tabImpersonate = x.Add().Text(T("Admin.Customers.Customers.Impersonate").Text).Content(TabImpersonate().ToHtmlString());

    var selectedTab = (string)ViewData["selectedTab"];
    switch (selectedTab)
    {
        case "info":
            tabInfo.Selected(true);
            break;
        case "activitylog":
            tabActivityLog.Selected(true);
            break;
        default:
            tabInfo.Selected(true);
            break;
    }

    //generate an event
    EngineContext.Current.Resolve<IEventPublisher>().Publish(new AdminTabStripCreated(x, "customer-edit"));
})
<script type="text/javascript">
    $(document).ready(function () {
        $('#RegionId').change(function () {
            var regionId = $(this).attr('value');
            $.ajax('/Customer/GetCities', {
                data: { regionId: regionId },
                dataType: 'json',
                type: 'POST',
                success: function (data) {
                    if (data.Success) {
                        $('#CityId').html(data.resultHtml);
                    }
                }
            });
        });
    });
</script>
@helper TabInfo()
{ 
    <table class="adminContent">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Email):
            </td>
            <td class="adminData">
                @Model.Email
                @Html.HiddenFor(model=>model.Email)
                @Html.ValidationMessageFor(model => model.Email)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.FirstName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.FirstName)
                @Html.ValidationMessageFor(model => model.FirstName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.LastName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.LastName)
                @Html.ValidationMessageFor(model => model.LastName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Income):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => model.Income)
                @Html.DropDownListFor(model=>model.CurrencyId,Model.AviableCurrencies.Select(x=>new SelectListItem()
                    {
                        Text = x.CurrencyCode,
                        Value = x.Id.ToString(),
                        Selected = Model.CurrencyId == x.Id
                    }))
                @Html.ValidationMessageFor(model => model.Income)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Index):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Index)
                @Html.ValidationMessageFor(model => model.Index)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.BirthdayDate):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.BirthdayDate)
                @Html.ValidationMessageFor(model => model.BirthdayDate)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Address):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Address)
                @Html.ValidationMessageFor(model => model.Address)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Password):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Password,"Password")
                @Html.ValidationMessageFor(model => model.Password)
                @if (Model.Id > 0)
                {
                    <input type="submit" name="changepassword" class="t-button" value="@T("Admin.Customers.Customers.Fields.Password.Change")" />
                }
            </td>
        </tr>
        @if (Model.AllowCustomersToSetTimeZone)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.TimeZoneId):
                </td>
                <td class="adminData">
                    @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                    @Html.ValidationMessageFor(model => model.TimeZoneId)
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Active):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => model.Active)
                @Html.ValidationMessageFor(model => model.Active)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model=>model.RegionId)
            </td>
            <td class="adminData">
                @Html.DropDownListFor(mode=>Model.RegionId,Model.Regions.Select(x=>new SelectListItem(){Text = x.Title,Value = x.Id.ToString(),Selected = x.Id == Model.RegionId}))
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model=>model.CityId)
            </td>
            <td class="adminData">
                <select id="CityId" name="CityId">
                                @foreach (var city in Model.Cities)
                                {
                                    if (city.Id == Model.CityId)
                                    {
                                        <option value="@city.Id" selected>@city.Title</option>
                                    }
                                    else
                                    {
                                        <option value="@city.Id">@city.Title</option>
                                    }
                                }
                            </select>
            </td>
        </tr>
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.LastIpAddress):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastIpAddress)
                </td>
            </tr>
        }
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.CreatedOn):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.CreatedOn)
                </td>
            </tr>
        }
        @if (Model.Id > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.LastActivityDate):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastActivityDate)
                </td>
            </tr>
        }
        @if (Model.Id > 0 && !String.IsNullOrEmpty(Model.LastVisitedPage))
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.LastVisitedPage):
                </td>
                <td class="adminData">
                    @Html.DisplayFor(model => model.LastVisitedPage)
                </td>
            </tr>
        }
        @if (Model.Id > 0 && Model.AssociatedExternalAuthRecords.Count > 0)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.AssociatedExternalAuthRecords):
                </td>
                <td class="adminData">
                    @(Html.Telerik().Grid<CustomerModel.AssociatedExternalAuthModel>(Model.AssociatedExternalAuthRecords)
                    .Name("externalauthrecords-grid")
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.AuthMethodName)
                            .Width(100);
                        columns.Bound(x => x.Email)
                             .Width(100);
                        columns.Bound(x => x.ExternalIdentifier)
                            .Width(300);
                    })
                    .Footer(false))
                </td>
            </tr>
        }
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Gender):
            </td>
            <td class="adminData">
                @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "Gender_Male" })
                <label class="forcheckbox" for="Gender_Male">@T("Admin.Customers.Customers.Fields.Gender.Male")</label>
                @Html.RadioButton("Gender", "W", (Model.Gender == "W"), new { id = "Gender_Female" })
                <label class="forcheckbox" for="Gender_Female">@T("Admin.Customers.Customers.Fields.Gender.Female")</label>
            </td>
        </tr>
        @if (Model.DateOfBirthEnabled)
        {
            <tr>
                <td class="adminTitle">
                    @Html.NopLabelFor(model => model.DateOfBirth):
                </td>
                <td class="adminData">
                    @Html.EditorFor(model => model.DateOfBirth)
                    @Html.ValidationMessageFor(model => model.DateOfBirth)
                </td>
            </tr>
        }
    </table>
}
@helper TabCustomerRoles()
{
    if (Model.AvailableCustomerRoles != null && Model.AvailableCustomerRoles.Count > 0)
    {
        foreach (var customerRole in Model.AvailableCustomerRoles)
        {
    <input type="checkbox" name="SelectedCustomerRoleIds" value="@customerRole.Id"
                @if (Model.SelectedCustomerRoleIds != null && Model.SelectedCustomerRoleIds.Contains(customerRole.Id))
                {
                    <text> checked="checked"</text>
                }
                @if (!Model.AllowManagingCustomerRoles)
                {
                <text> disabled="disabled"</text>
                }
                />@customerRole.Name
    <br />
        }
    }
    else
    {
    @T("Admin.Customers.Customers.Fields.CustomerRoles.NoRoles")
    }
}
@helper TabActivityLog()
{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
    
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<CustomerModel.ActivityLogModel>()
                            .Name("activitylog-grid")
                            .Columns(columns =>
                            {
                                columns.Bound(x => x.ActivityLogTypeName)
                                    .Centered();
                                columns.Bound(x => x.Comment)
                                    .Centered();
                                columns.Bound(x => x.CreatedOn)
                                    .Centered();
                            })
                            .Pageable(settings => settings.PageSize(gridPageSize).Position(GridPagerPosition.Both))
                            .DataBinding(dataBinding => dataBinding.Ajax()
                                .Select("ListActivityLog", "Customer", new
                                {
                                    customerId = Model.Id
                                }))
                        )
            </td>
        </tr>
    </table>
}
